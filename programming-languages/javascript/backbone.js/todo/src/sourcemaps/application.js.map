{"version":3,"sources":["templates.js","app.js","Todo/TodoCollection.js","Todo/TodoView.js","TodoItem/TodoItemModel.js","TodoItem/TodoItemView.js"],"names":["n","Handlebars","template","e","templates","compiler","main","a","t","useData",1,"s","l","i","c","helperMissing","o","this","escapeExpression","d","call","completed","name","hash","fn","program","inverse","noop","data","title","root","app","container","TPL","logger","initialMessage","log","console","Array","prototype","slice","arguments","join","TodoCollection","Backbone","Collection","extend","model","TodoItem","localStorage","LocalStorage","filter","todo","get","remaining","without","apply","nextOrder","length","last","comparator","TodoView","View","el","events","keypress #new-todo","click #clear-completed","click #toggle-all","initialize","listenTo","addOne","addAll","filterOne","filterAll","render","fetch","setUiElements","$newTodo","$","$footer","$main","$todoListRegion","todoList","view","TodoItemView","$todoList","append","$el","html","Todos","each","add","addOnem","trigger","newAttributes","$input","val","trim","order","createOnEnter","ev","which","ENTER_KEY","create","clearCompleted","_","invoke","toggleAllComplete","allCheckbox","checked","save","show","hide","TodoItemModel","Model","defaults","toggle","Marionette","ItemView","tagName","className","ui","check","destroy","edit","click @ui.check","dblclick @ui.title","click @ui.destroy","keypress @ui.edit","blur @ui.edit","$target","target","$item","closest","addClass","focus","slideUp","cancel","keyCode","isActive","removeClass","find","hasClass","close","value","updateOnEnter","toJSON"],"mappings":"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","file":"application.js","sourcesContent":["!function(){var n=Handlebars.template,e=Handlebars.templates=Handlebars.templates||{};e[\"Todo/todo\"]=n({compiler:[6,\">= 2.0.0-beta.1\"],main:function(n,e,a,t){return'<div class=\"row container\">\\n  <div class=\"large-8 large-offset-2 columns\">\\n    <header id=\"header\">\\n      <h1 class=\"text-center\">todos</h1>\\n    </header>\\n    <section id=\"main\">\\n      <h2 class=\"text-center subheader\"><span class=\"check\"><i class=\"fi-check\"></i></span> What needs to be done?</h2>\\n      <div class=\"row\">\\n        <div class=\"columns\">\\n          <div id=\"todo-list-region\"></div>\\n          <!--<div id=\"status\">\\n            <div class=\"row\">\\n              <div class=\"large-3 columns\">\\n                <span>1 task left</span>\\n              </div>\\n              <div class=\"large-6 columns text-center\">\\n                <a href=\"\">all</a>\\n                <a href=\"\">completed</a>\\n                <a href=\"\">uncompleted</a>\\n              </div>\\n              <div class=\"large-3 columns text-right\">\\n                <a href=\"\">mark all as completed</a>\\n              </div>\\n            </div>\\n          </div>-->\\n        </div>\\n      </div>\\n    </section>\\n    <footer id=\"footer\">\\n      <div id=\"info\">\\n        <p class=\"text-center\">\\n          Double click to edit a todo\\n        </p>\\n        <p class=\"text-center\">\\n          Written by <a href=\"http://www.github.com/carlohcs\">@carlohcs</a> - 2016\\n        </p>\\n      </div>\\n    </footer>\\n  </div>\\n</div>\\n'},useData:!0}),e[\"TodoItem/item\"]=n({1:function(n,e,a,t){return\" closed \"},compiler:[6,\">= 2.0.0-beta.1\"],main:function(n,e,a,t){var s,l,i=\"function\",c=e.helperMissing,o=this.escapeExpression,d='<div class=\"';return s=e[\"if\"].call(n,null!=n?n.completed:n,{name:\"if\",hash:{},fn:this.program(1,t),inverse:this.noop,data:t}),null!=s&&(d+=s),d+'\">\\n  <!--<span class=\"check\"><input type=\"checkbox\" /></span>-->\\n  <span class=\"check\"><i class=\"fi-check\"></i></span>\\n  <span class=\"destroy right\"><i class=\"fi-x\"></i></span>\\n  <label class=\\'title\\'>'+o((l=null!=(l=e.title||(null!=n?n.title:n))?l:c,typeof l===i?l.call(n,{name:\"title\",hash:{},data:t}):l))+\"</label>\\n  <input class='edit' value='\"+o((l=null!=(l=e.title||(null!=n?n.title:n))?l:c,typeof l===i?l.call(n,{name:\"title\",hash:{},data:t}):l))+\"' />\\n</div>\\n\"},useData:!0})}();","(function(root, Handlebars) {\n  root.app = {};\n  app.container = '#todo-app';\n  app.TPL = Handlebars.templates;\n\n  // Log service\n  app.logger = (function() {\n\n    var\n      initialMessage = '[TODO APP] ',\n      log = {\n        log: function() {\n          console.log(initialMessage, Array.prototype.slice.call(arguments).join('.'));\n        }\n    };\n\n    return log;\n  })();\n})(this, Handlebars);\n","var\n  app = app || {},\n  TodoCollection = Backbone.Collection.extend({\n  model: app.TodoItem,\n\n  /**\n   * Save all of the todo items under the \"todos-backbone\" namespace.\n   * Nothe that you will need to have the Backbone localStorage plug-in\n   * loaded inside your page in order for this work. If testing in console without\n   * this present, comment out the next line\n   * to avoid running into a exception\n   */\n  localStorage: new Backbone.LocalStorage('todos-backbone'),\n\n  // Fileter down the list of all todo items that are finished.\n  completed: function() {\n    return this.filter(function( todo ) {\n      return todo.get('completed');\n    });\n  },\n\n  // Filter down the list to only todo items that are still not finished\n  remaining: function() {\n    // applu allowus to define the context of this within our function scope\n    return this.without.apply( this, this.completed() );\n  },\n\n  // We keep the Todos in sequential order, despite being saved by unordered\n  // GUID in the database. This generates the next order number for new items.\n  nextOrder: function() {\n    if( !this.length ) {\n      return 1;\n    }\n    return this.last().get('order') + 1;\n  },\n\n  // Todos are sorted by their oiriginal insertion order\n  comparator: function( todo ) {\n    return todo.get('order');\n  }\n});\n\n// Create our global collection of **Todos**\napp.TodoCollection = new TodoCollection();\n","var app = app || {};\n\n//http://stackoverflow.com/questions/10521266/whats-the-difference-between-a-marionette-layout-and-a-region\n//Backbone.Marionette.LayoutView\n//Backbone.View.extend({\napp.TodoView = Backbone.View.extend({\n  el: app.container,\n  template: app.TPL['Todo/todo'],\n\n  events: {\n    'keypress #new-todo': 'createOnEnter',\n    'click #clear-completed': 'clearCompleted',\n    'click #toggle-all': 'toggleAllComplete'\n  },\n\n  /**\n   * At initialization we bind to the relevant events on the 'Todos'\n   * collection, when items are added or changed\n   * @return {[type]} [description]\n   */\n  initialize: function() {\n\n    // Listeners\n    this\n      .listenTo(app.TodoCollection, 'add', this.addOne)\n      .listenTo(app.TodoCollection, 'reset', this.addAll)\n      .listenTo(app.TodoCollection, 'change:completed', this.filterOne)\n      .listenTo(app.TodoCollection, 'filter', this.filterAll)\n      .listenTo(app.TodoCollection, 'all', this.render);\n\n    app.TodoCollection.fetch();\n  },\n\n  /**\n   * Set the elements 'regions' from view\n   *\n   * @return {void}\n   */\n  setUiElements: function() {\n    this.$newTodo        = this.$('#new-todo');\n    this.$footer         = this.$('#footer');\n    this.$main           = this.$('#main');\n    this.$todoListRegion = this.$('#todo-list-region');\n    this.todoList        = this.$('#todo-list');\n  },\n  /**\n   * Add a single todo item to the list by creating a view for it, and\n   * appending its element to the '<ul>'\n   *\n   * @param  {app.TodoItem} todo\n   * @return {void}\n   */\n  addOne: function( todo ) {\n    var view = new app.TodoItemView({ model: todo });\n    this.$todoList.append( view.render().$el );\n  },\n\n  /**\n   * Add all items in the **TodoCollection** at once.\n   *\n   * @return {void}\n   */\n  addAll: function() {\n      this.$todoList.html('');\n      app.Todos.each(this.add.addOnem, this);\n  },\n\n  filterOne: function( todo ) {\n    todo.trigger('visible');\n  },\n\n  filterAll: function() {\n    app.TodoCollection.each(this.filterOne, this);\n  },\n\n  /**\n   * Generate the attributes for a new todo item\n   *\n   * @return {void}\n   */\n  newAttributes: function() {\n    return {\n      title: this.$input.val().trim(),\n      order: app.TodoCollection.nextOrder(),\n      completed: false\n    };\n  },\n\n  /**\n   * If you hit return in the main input field, create new Todo model,\n   * persisting it to localStorage\n   *\n   * @param  {jQuery.Event} ev\n   * @return {void}\n   */\n  createOnEnter: function(ev) {\n    if( ev.which !== ENTER_KEY || !this.$input.val().trim() ) {\n      return;\n    }\n\n    app.TodoCollection.create( this.newAttributes() );\n    this.$input.val('');\n  },\n\n  /**\n   * Clear all completed todo items, destroying their models\n   *\n   * @return {void}\n   */\n  clearCompleted: function() {\n    _.invoke(app.TodoCollection(), 'destroy');\n    return false;\n  },\n\n  toggleAllComplete: function() {\n    var\n      completed = this.allCheckbox.checked;\n\n    app.TodoCollection.each(function( todo ) {\n      todo.save({\n        'completed': completed\n      });\n    });\n  },\n\n  /**\n   * Render the view\n   *\n   * Anotation: The render method is implemented on Marionette\n   *\n   * @return {void}\n   */\n  render: function() {\n    var\n      completed = app.TodoCollection.completed().length,\n      remaining = app.TodoCollection.remaining().length;\n\n    this.$el.html( this.template({\n        completed: completed,\n        remaining: remaining\n     })\n   );\n\n    this.setUiElements();\n\n    if( app.TodoCollection.length ) {\n      this.$main.show();\n      this.$footer.show();\n    } else {\n      this.$main.hide();\n      this.$footer.hide();\n    }\n  }\n});\n","var app = app || {};\n\n// Todo Model\n// ---------\n\napp.TodoItemModel = Backbone.Model.extend({\n  // Default attributes ensure that each todo created has 'title' and\n  // 'completed' keys\n  defaults: {\n    title: '',\n    completed: false\n  },\n\n  // toggle the completed state of this todo item\n  toggle: function() {\n    this.save({\n      completed: !this.get('completed')\n    });\n  }\n});\n","var\n  app = app || {},\n  TodoItemView = Backbone.Marionette.ItemView.extend({\n\n    tagName: 'li',\n\n    className: 'todo-item',\n\n    template: app.TPL['TodoItem/item'],\n\n    ui: {\n      check: '.check',\n      destroy: '.destroy',\n      title: '.title',\n      edit: '.edit'\n    },\n\n    events: {\n      'click @ui.check': 'toggleCheck',\n      'dblclick @ui.title': 'edit',\n      'click @ui.destroy': 'destroy',\n      'keypress @ui.edit': 'updateOnEnter',\n      'blur @ui.edit': 'cancel'\n    },\n\n    initialize: function() {\n\n      this\n        .listenTo(this.model, 'change', this.render);\n    },\n    // toggleCheck: function(ev) {\n    //   var\n    //    $target = $(ev.target),\n    //    $item = $target.closest('div');\n    //\n    //   $item.toggleClass('closed', !this.completed);\n    // },\n    /**\n     * Active the edit state\n     *\n     * @param  {jQuery.Event} ev\n     * @return {void}\n     */\n    edit: function(ev) {\n      var\n       $target = $(ev.target),\n       $item = $target.closest('div');\n\n      $item.addClass('active');\n\n      // Set focus on input\n      // $item.find( this.ui.edit ).focus();\n      this.$input.focus();\n    },\n    destroy: function(ev) {\n      var\n       $target = $(ev.target),\n       $item = $target.closest('li');\n\n      $item.slideUp();\n    },\n    /**\n     * Cancel the current edit\n     *\n     * @param  {Event} ev\n     * @return {void}\n     */\n    cancel: function( ev ) {\n      var\n       $target = $(ev.target),\n       $item = $target.closest('div');\n\n      if(ev.keyCode === ENTER_KEY && this.isActive()) {\n        $item.removeClass('active');\n      }\n    },\n    /**\n     * Return ir item is active\n     *\n     * @return {void}\n     */\n    isActive: function() {\n      return this.$el.find('div').hasClass('active');\n    },\n\n    close: function() {\n      var\n        value = this.$input.val().trim();\n\n      if( value ) {\n        this.model.save({ title: value });\n      }\n\n      this.$el.find('div').removeClass('active');\n    },\n\n    /**\n     * If you hit 'enter', we're through editing the item\n     *\n     * @param  {jQuery.Event} e\n     * @return {void}\n     */\n    updateOnEnter: function(e) {\n      if( e.which === ENTER_KEY ) {\n        this.close();\n      }\n    },\n    /**\n     * Implements the render method\n     *\n     * @return {void}\n     */\n    render: function() {\n      this.$el.html( this.template( this.model.toJSON() ) );\n      return this;\n    }\n  });\n\n// Append the component to namespace\napp.TodoItemView = TodoItemView;\n"],"sourceRoot":"/source/"}